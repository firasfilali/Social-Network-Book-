/**
 * OpenApi specification - Firas
 * OpenApi documentation for Spring Security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: firas.fileli@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticationRequest from '../model/AuthenticationRequest';
import AuthenticationResponse from '../model/AuthenticationResponse';
import RegistrationRequest from '../model/RegistrationRequest';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticate operation.
     * @callback module:api/AuthenticationApi~authenticateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/AuthenticationRequest} authenticationRequest 
     * @param {module:api/AuthenticationApi~authenticateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResponse}
     */
    authenticate(authenticationRequest, callback) {
      let postBody = authenticationRequest;
      // verify the required parameter 'authenticationRequest' is set
      if (authenticationRequest === undefined || authenticationRequest === null) {
        throw new Error("Missing the required parameter 'authenticationRequest' when calling authenticate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthenticationResponse;
      return this.apiClient.callApi(
        '/auth/authenticate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirm operation.
     * @callback module:api/AuthenticationApi~confirmCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/AuthenticationApi~confirmCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirm(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling confirm");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/auth/activate-account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/AuthenticationApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RegistrationRequest} registrationRequest 
     * @param {module:api/AuthenticationApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    register(registrationRequest, callback) {
      let postBody = registrationRequest;
      // verify the required parameter 'registrationRequest' is set
      if (registrationRequest === undefined || registrationRequest === null) {
        throw new Error("Missing the required parameter 'registrationRequest' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/auth/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
