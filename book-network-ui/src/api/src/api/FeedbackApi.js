/**
 * OpenApi specification - Firas
 * OpenApi documentation for Spring Security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: firas.fileli@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FeedbackRequest from '../model/FeedbackRequest';
import PageResponseFeedbackResponse from '../model/PageResponseFeedbackResponse';

/**
* Feedback service.
* @module api/FeedbackApi
* @version 1.0
*/
export default class FeedbackApi {

    /**
    * Constructs a new FeedbackApi. 
    * @alias module:api/FeedbackApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the findAllFeedbacksByBook operation.
     * @callback module:api/FeedbackApi~findAllFeedbacksByBookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseFeedbackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/FeedbackApi~findAllFeedbacksByBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseFeedbackResponse}
     */
    findAllFeedbacksByBook(bookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling findAllFeedbacksByBook");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseFeedbackResponse;
      return this.apiClient.callApi(
        '/feedbacks/book/{book-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveFeedback operation.
     * @callback module:api/FeedbackApi~saveFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/FeedbackRequest} feedbackRequest 
     * @param {module:api/FeedbackApi~saveFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    saveFeedback(feedbackRequest, callback) {
      let postBody = feedbackRequest;
      // verify the required parameter 'feedbackRequest' is set
      if (feedbackRequest === undefined || feedbackRequest === null) {
        throw new Error("Missing the required parameter 'feedbackRequest' when calling saveFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/feedbacks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
