/**
 * OpenApi specification - Firas
 * OpenApi documentation for Spring Security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: firas.fileli@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BookRequest from '../model/BookRequest';
import BookResponse from '../model/BookResponse';
import PageResponseBookResponse from '../model/PageResponseBookResponse';
import PageResponseBorrowedBookResponse from '../model/PageResponseBorrowedBookResponse';
import axiosInstance from "../../../interceptor/axiosInstance";

/**
* Book service.
* @module api/BookApi
* @version 1.0
*/
export default class BookApi {

    /**
    * Constructs a new BookApi. 
    * @alias module:api/BookApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the approveReturnBorrowBook operation.
     * @callback module:api/BookApi~approveReturnBorrowBookCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~approveReturnBorrowBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    approveReturnBorrowBook(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling approveReturnBorrowBook");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/borrow/return/approve/{book-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the borrowBook operation.
     * @callback module:api/BookApi~borrowBookCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~borrowBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    borrowBook(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling borrowBook");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/borrow/{book-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllBooks operation.
     * @callback module:api/BookApi~findAllBooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/BookApi~findAllBooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBookResponse}
     */
    findAllBooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseBookResponse;
      return axiosInstance.get(
        '/books', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllBooksByOwner operation.
     * @callback module:api/BookApi~findAllBooksByOwnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/BookApi~findAllBooksByOwnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBookResponse}
     */
    findAllBooksByOwner(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseBookResponse;
      return this.apiClient.callApi(
        '/books/owner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllBorrowedBooks operation.
     * @callback module:api/BookApi~findAllBorrowedBooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBorrowedBookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/BookApi~findAllBorrowedBooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBorrowedBookResponse}
     */
    findAllBorrowedBooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseBorrowedBookResponse;
      return this.apiClient.callApi(
        '/books/borrowed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findAllReturnedBooks operation.
     * @callback module:api/BookApi~findAllReturnedBooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageResponseBorrowedBookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 0)] 
     * @param {Number} [size = 10)] 
     * @param {module:api/BookApi~findAllReturnedBooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageResponseBorrowedBookResponse}
     */
    findAllReturnedBooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageResponseBorrowedBookResponse;
      return this.apiClient.callApi(
        '/books/returned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findBookById operation.
     * @callback module:api/BookApi~findBookByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~findBookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BookResponse}
     */
    findBookById(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling findBookById");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BookResponse;
      return this.apiClient.callApi(
        '/books/{book-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the returnBorrowBook operation.
     * @callback module:api/BookApi~returnBorrowBookCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~returnBorrowBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    returnBorrowBook(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling returnBorrowBook");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/borrow/return/{book-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the saveBook operation.
     * @callback module:api/BookApi~saveBookCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/BookRequest} bookRequest 
     * @param {module:api/BookApi~saveBookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    saveBook(bookRequest, callback) {
      let postBody = bookRequest;
      // verify the required parameter 'bookRequest' is set
      if (bookRequest === undefined || bookRequest === null) {
        throw new Error("Missing the required parameter 'bookRequest' when calling saveBook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateArchivedStatus operation.
     * @callback module:api/BookApi~updateArchivedStatusCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~updateArchivedStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateArchivedStatus(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling updateArchivedStatus");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/archived/{book-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateShareableStatus operation.
     * @callback module:api/BookApi~updateShareableStatusCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {module:api/BookApi~updateShareableStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateShareableStatus(bookId, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling updateShareableStatus");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/books/shareable/{book-id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadBookCoverPicture operation.
     * @callback module:api/BookApi~uploadBookCoverPictureCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} bookId 
     * @param {File} file 
     * @param {module:api/BookApi~uploadBookCoverPictureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    uploadBookCoverPicture(bookId, file, callback) {
      let postBody = null;
      // verify the required parameter 'bookId' is set
      if (bookId === undefined || bookId === null) {
        throw new Error("Missing the required parameter 'bookId' when calling uploadBookCoverPicture");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadBookCoverPicture");
      }

      let pathParams = {
        'book-id': bookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/books/cover/{book-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
