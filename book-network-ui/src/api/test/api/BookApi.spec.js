/**
 * OpenApi specification - Firas
 * OpenApi documentation for Spring Security
 *
 * The version of the OpenAPI document: 1.0
 * Contact: firas.fileli@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenApiSpecificationFiras);
  }
}(this, function(expect, OpenApiSpecificationFiras) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenApiSpecificationFiras.BookApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BookApi', function() {
    describe('approveReturnBorrowBook', function() {
      it('should call approveReturnBorrowBook successfully', function(done) {
        //uncomment below and update the code to test approveReturnBorrowBook
        //instance.approveReturnBorrowBook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('borrowBook', function() {
      it('should call borrowBook successfully', function(done) {
        //uncomment below and update the code to test borrowBook
        //instance.borrowBook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllBooks', function() {
      it('should call findAllBooks successfully', function(done) {
        //uncomment below and update the code to test findAllBooks
        //instance.findAllBooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllBooksByOwner', function() {
      it('should call findAllBooksByOwner successfully', function(done) {
        //uncomment below and update the code to test findAllBooksByOwner
        //instance.findAllBooksByOwner(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllBorrowedBooks', function() {
      it('should call findAllBorrowedBooks successfully', function(done) {
        //uncomment below and update the code to test findAllBorrowedBooks
        //instance.findAllBorrowedBooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findAllReturnedBooks', function() {
      it('should call findAllReturnedBooks successfully', function(done) {
        //uncomment below and update the code to test findAllReturnedBooks
        //instance.findAllReturnedBooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findBookById', function() {
      it('should call findBookById successfully', function(done) {
        //uncomment below and update the code to test findBookById
        //instance.findBookById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('returnBorrowBook', function() {
      it('should call returnBorrowBook successfully', function(done) {
        //uncomment below and update the code to test returnBorrowBook
        //instance.returnBorrowBook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('saveBook', function() {
      it('should call saveBook successfully', function(done) {
        //uncomment below and update the code to test saveBook
        //instance.saveBook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateArchivedStatus', function() {
      it('should call updateArchivedStatus successfully', function(done) {
        //uncomment below and update the code to test updateArchivedStatus
        //instance.updateArchivedStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateShareableStatus', function() {
      it('should call updateShareableStatus successfully', function(done) {
        //uncomment below and update the code to test updateShareableStatus
        //instance.updateShareableStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadBookCoverPicture', function() {
      it('should call uploadBookCoverPicture successfully', function(done) {
        //uncomment below and update the code to test uploadBookCoverPicture
        //instance.uploadBookCoverPicture(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
